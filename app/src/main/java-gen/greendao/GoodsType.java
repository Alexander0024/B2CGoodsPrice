package greendao;

import java.util.List;
import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "GOODS_TYPE".
 */
public class GoodsType {

    private Long goodsTypeId;
    private String goodsTypeName;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GoodsTypeDao myDao;

    private List<Goods> goodsList;
    private List<GoodsBrand> brandList;

    public GoodsType() {
    }

    public GoodsType(Long goodsTypeId) {
        this.goodsTypeId = goodsTypeId;
    }

    public GoodsType(Long goodsTypeId, String goodsTypeName) {
        this.goodsTypeId = goodsTypeId;
        this.goodsTypeName = goodsTypeName;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGoodsTypeDao() : null;
    }

    public Long getGoodsTypeId() {
        return goodsTypeId;
    }

    public void setGoodsTypeId(Long goodsTypeId) {
        this.goodsTypeId = goodsTypeId;
    }

    public String getGoodsTypeName() {
        return goodsTypeName;
    }

    public void setGoodsTypeName(String goodsTypeName) {
        this.goodsTypeName = goodsTypeName;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Goods> getGoodsList() {
        if (goodsList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GoodsDao targetDao = daoSession.getGoodsDao();
            List<Goods> goodsListNew = targetDao._queryGoodsType_GoodsList(goodsTypeId);
            synchronized (this) {
                if(goodsList == null) {
                    goodsList = goodsListNew;
                }
            }
        }
        return goodsList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGoodsList() {
        goodsList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<GoodsBrand> getBrandList() {
        if (brandList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GoodsBrandDao targetDao = daoSession.getGoodsBrandDao();
            List<GoodsBrand> brandListNew = targetDao._queryGoodsType_BrandList(goodsTypeId);
            synchronized (this) {
                if(brandList == null) {
                    brandList = brandListNew;
                }
            }
        }
        return brandList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetBrandList() {
        brandList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
