package greendao;

import java.util.List;
import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "GOODS_BRAND".
 */
public class GoodsBrand {

    private Long goodsBrandId;
    private String goodsBrandName;
    private Long goodsTypeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GoodsBrandDao myDao;

    private GoodsType goodsType;
    private Long goodsType__resolvedKey;

    private List<Goods> goodsList;

    public GoodsBrand() {
    }

    public GoodsBrand(Long goodsBrandId) {
        this.goodsBrandId = goodsBrandId;
    }

    public GoodsBrand(Long goodsBrandId, String goodsBrandName, Long goodsTypeId) {
        this.goodsBrandId = goodsBrandId;
        this.goodsBrandName = goodsBrandName;
        this.goodsTypeId = goodsTypeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGoodsBrandDao() : null;
    }

    public Long getGoodsBrandId() {
        return goodsBrandId;
    }

    public void setGoodsBrandId(Long goodsBrandId) {
        this.goodsBrandId = goodsBrandId;
    }

    public String getGoodsBrandName() {
        return goodsBrandName;
    }

    public void setGoodsBrandName(String goodsBrandName) {
        this.goodsBrandName = goodsBrandName;
    }

    public Long getGoodsTypeId() {
        return goodsTypeId;
    }

    public void setGoodsTypeId(Long goodsTypeId) {
        this.goodsTypeId = goodsTypeId;
    }

    /** To-one relationship, resolved on first access. */
    public GoodsType getGoodsType() {
        Long __key = this.goodsTypeId;
        if (goodsType__resolvedKey == null || !goodsType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GoodsTypeDao targetDao = daoSession.getGoodsTypeDao();
            GoodsType goodsTypeNew = targetDao.load(__key);
            synchronized (this) {
                goodsType = goodsTypeNew;
            	goodsType__resolvedKey = __key;
            }
        }
        return goodsType;
    }

    public void setGoodsType(GoodsType goodsType) {
        synchronized (this) {
            this.goodsType = goodsType;
            goodsTypeId = goodsType == null ? null : goodsType.getGoodsTypeId();
            goodsType__resolvedKey = goodsTypeId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Goods> getGoodsList() {
        if (goodsList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GoodsDao targetDao = daoSession.getGoodsDao();
            List<Goods> goodsListNew = targetDao._queryGoodsBrand_GoodsList(goodsBrandId);
            synchronized (this) {
                if(goodsList == null) {
                    goodsList = goodsListNew;
                }
            }
        }
        return goodsList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGoodsList() {
        goodsList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
