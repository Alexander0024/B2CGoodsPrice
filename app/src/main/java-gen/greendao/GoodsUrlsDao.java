package greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import greendao.GoodsUrls;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS_URLS".
*/
public class GoodsUrlsDao extends AbstractDao<GoodsUrls, Long> {

    public static final String TABLENAME = "GOODS_URLS";

    /**
     * Properties of entity GoodsUrls.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property GoodsUrlId = new Property(0, Long.class, "goodsUrlId", true, "GOODS_URL_ID");
        public final static Property UrlAddress = new Property(1, String.class, "urlAddress", false, "URL_ADDRESS");
    };

    private Query<GoodsUrls> goods_UrlListQuery;

    public GoodsUrlsDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsUrlsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS_URLS\" (" + //
                "\"GOODS_URL_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: goodsUrlId
                "\"URL_ADDRESS\" TEXT);"); // 1: urlAddress
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS_URLS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GoodsUrls entity) {
        stmt.clearBindings();
 
        Long goodsUrlId = entity.getGoodsUrlId();
        if (goodsUrlId != null) {
            stmt.bindLong(1, goodsUrlId);
        }
 
        String urlAddress = entity.getUrlAddress();
        if (urlAddress != null) {
            stmt.bindString(2, urlAddress);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GoodsUrls readEntity(Cursor cursor, int offset) {
        GoodsUrls entity = new GoodsUrls( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // goodsUrlId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // urlAddress
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GoodsUrls entity, int offset) {
        entity.setGoodsUrlId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrlAddress(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GoodsUrls entity, long rowId) {
        entity.setGoodsUrlId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GoodsUrls entity) {
        if(entity != null) {
            return entity.getGoodsUrlId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "urlList" to-many relationship of Goods. */
    public List<GoodsUrls> _queryGoods_UrlList(Long goodsUrlId) {
        synchronized (this) {
            if (goods_UrlListQuery == null) {
                QueryBuilder<GoodsUrls> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GoodsUrlId.eq(null));
                goods_UrlListQuery = queryBuilder.build();
            }
        }
        Query<GoodsUrls> query = goods_UrlListQuery.forCurrentThread();
        query.setParameter(0, goodsUrlId);
        return query.list();
    }

}
