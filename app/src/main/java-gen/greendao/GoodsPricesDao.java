package greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import greendao.GoodsPrices;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS_PRICES".
*/
public class GoodsPricesDao extends AbstractDao<GoodsPrices, Long> {

    public static final String TABLENAME = "GOODS_PRICES";

    /**
     * Properties of entity GoodsPrices.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, Boolean.class, "type", false, "TYPE");
        public final static Property Date = new Property(2, java.util.Date.class, "date", false, "DATE");
        public final static Property Seller = new Property(3, String.class, "seller", false, "SELLER");
        public final static Property Price = new Property(4, Double.class, "price", false, "PRICE");
        public final static Property GoodsId = new Property(5, Long.class, "goodsId", false, "GOODS_ID");
    };

    private Query<GoodsPrices> goods_PricesQuery;

    public GoodsPricesDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsPricesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS_PRICES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE\" INTEGER," + // 1: type
                "\"DATE\" INTEGER," + // 2: date
                "\"SELLER\" TEXT," + // 3: seller
                "\"PRICE\" REAL," + // 4: price
                "\"GOODS_ID\" INTEGER);"); // 5: goodsId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS_PRICES\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GoodsPrices entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type ? 1L: 0L);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(3, date.getTime());
        }
 
        String seller = entity.getSeller();
        if (seller != null) {
            stmt.bindString(4, seller);
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(5, price);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GoodsPrices readEntity(Cursor cursor, int offset) {
        GoodsPrices entity = new GoodsPrices( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // type
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // seller
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4) // price
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GoodsPrices entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setSeller(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GoodsPrices entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GoodsPrices entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "prices" to-many relationship of Goods. */
    public List<GoodsPrices> _queryGoods_Prices(Long goodsId) {
        synchronized (this) {
            if (goods_PricesQuery == null) {
                QueryBuilder<GoodsPrices> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GoodsId.eq(null));
                goods_PricesQuery = queryBuilder.build();
            }
        }
        Query<GoodsPrices> query = goods_PricesQuery.forCurrentThread();
        query.setParameter(0, goodsId);
        return query.list();
    }

}
