package greendao;

import java.util.List;
import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "GOODS".
 */
public class Goods {

    private Long id;
    private String name;
    private String standard;
    private Double cheapestOnline;
    private Double cheapestOffline;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GoodsDao myDao;

    private GoodsType goodsType;
    private Long goodsType__resolvedKey;

    private GoodsBrand goodsBrand;
    private Long goodsBrand__resolvedKey;

    private List<GoodsPrices> priceList;
    private List<GoodsUrls> urlList;

    public Goods() {
    }

    public Goods(Long id) {
        this.id = id;
    }

    public Goods(Long id, String name, String standard, Double cheapestOnline, Double cheapestOffline) {
        this.id = id;
        this.name = name;
        this.standard = standard;
        this.cheapestOnline = cheapestOnline;
        this.cheapestOffline = cheapestOffline;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGoodsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getStandard() {
        return standard;
    }

    public void setStandard(String standard) {
        this.standard = standard;
    }

    public Double getCheapestOnline() {
        return cheapestOnline;
    }

    public void setCheapestOnline(Double cheapestOnline) {
        this.cheapestOnline = cheapestOnline;
    }

    public Double getCheapestOffline() {
        return cheapestOffline;
    }

    public void setCheapestOffline(Double cheapestOffline) {
        this.cheapestOffline = cheapestOffline;
    }

    /** To-one relationship, resolved on first access. */
    public GoodsType getGoodsType() {
        Long __key = this.id;
        if (goodsType__resolvedKey == null || !goodsType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GoodsTypeDao targetDao = daoSession.getGoodsTypeDao();
            GoodsType goodsTypeNew = targetDao.load(__key);
            synchronized (this) {
                goodsType = goodsTypeNew;
            	goodsType__resolvedKey = __key;
            }
        }
        return goodsType;
    }

    public void setGoodsType(GoodsType goodsType) {
        synchronized (this) {
            this.goodsType = goodsType;
            id = goodsType == null ? null : goodsType.getId();
            goodsType__resolvedKey = id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public GoodsBrand getGoodsBrand() {
        Long __key = this.id;
        if (goodsBrand__resolvedKey == null || !goodsBrand__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GoodsBrandDao targetDao = daoSession.getGoodsBrandDao();
            GoodsBrand goodsBrandNew = targetDao.load(__key);
            synchronized (this) {
                goodsBrand = goodsBrandNew;
            	goodsBrand__resolvedKey = __key;
            }
        }
        return goodsBrand;
    }

    public void setGoodsBrand(GoodsBrand goodsBrand) {
        synchronized (this) {
            this.goodsBrand = goodsBrand;
            id = goodsBrand == null ? null : goodsBrand.getId();
            goodsBrand__resolvedKey = id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<GoodsPrices> getPriceList() {
        if (priceList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GoodsPricesDao targetDao = daoSession.getGoodsPricesDao();
            List<GoodsPrices> priceListNew = targetDao._queryGoods_PriceList(id);
            synchronized (this) {
                if(priceList == null) {
                    priceList = priceListNew;
                }
            }
        }
        return priceList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPriceList() {
        priceList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<GoodsUrls> getUrlList() {
        if (urlList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GoodsUrlsDao targetDao = daoSession.getGoodsUrlsDao();
            List<GoodsUrls> urlListNew = targetDao._queryGoods_UrlList(id);
            synchronized (this) {
                if(urlList == null) {
                    urlList = urlListNew;
                }
            }
        }
        return urlList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetUrlList() {
        urlList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
