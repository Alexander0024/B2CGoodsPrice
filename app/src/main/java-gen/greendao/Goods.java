package greendao;

import java.util.List;
import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "GOODS".
 */
public class Goods {

    private Long id;
    private Long goodsId;
    private String type;
    private String brand;
    private String name;
    private String standard;
    private Double cheapest_online;
    private Double cheapest_offline;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GoodsDao myDao;

    private List<GoodsUrls> urls;
    private List<GoodsPrices> prices;

    public Goods() {
    }

    public Goods(Long id) {
        this.id = id;
    }

    public Goods(Long id, Long goodsId, String type, String brand, String name, String standard, Double cheapest_online, Double cheapest_offline) {
        this.id = id;
        this.goodsId = goodsId;
        this.type = type;
        this.brand = brand;
        this.name = name;
        this.standard = standard;
        this.cheapest_online = cheapest_online;
        this.cheapest_offline = cheapest_offline;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGoodsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getGoodsId() {
        return goodsId;
    }

    public void setGoodsId(Long goodsId) {
        this.goodsId = goodsId;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getBrand() {
        return brand;
    }

    public void setBrand(String brand) {
        this.brand = brand;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getStandard() {
        return standard;
    }

    public void setStandard(String standard) {
        this.standard = standard;
    }

    public Double getCheapest_online() {
        return cheapest_online;
    }

    public void setCheapest_online(Double cheapest_online) {
        this.cheapest_online = cheapest_online;
    }

    public Double getCheapest_offline() {
        return cheapest_offline;
    }

    public void setCheapest_offline(Double cheapest_offline) {
        this.cheapest_offline = cheapest_offline;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<GoodsUrls> getUrls() {
        if (urls == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GoodsUrlsDao targetDao = daoSession.getGoodsUrlsDao();
            List<GoodsUrls> urlsNew = targetDao._queryGoods_Urls(id);
            synchronized (this) {
                if(urls == null) {
                    urls = urlsNew;
                }
            }
        }
        return urls;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetUrls() {
        urls = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<GoodsPrices> getPrices() {
        if (prices == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GoodsPricesDao targetDao = daoSession.getGoodsPricesDao();
            List<GoodsPrices> pricesNew = targetDao._queryGoods_Prices(id);
            synchronized (this) {
                if(prices == null) {
                    prices = pricesNew;
                }
            }
        }
        return prices;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPrices() {
        prices = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
