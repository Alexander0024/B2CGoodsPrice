package greendao;

import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "GOODS_PRICES".
 */
public class GoodsPrices {

    private Long id;
    private java.util.Date date;
    private String seller;
    private Double price;
    private String url;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GoodsPricesDao myDao;

    private PriceType priceType;
    private Long priceType__resolvedKey;


    public GoodsPrices() {
    }

    public GoodsPrices(Long id) {
        this.id = id;
    }

    public GoodsPrices(Long id, java.util.Date date, String seller, Double price, String url) {
        this.id = id;
        this.date = date;
        this.seller = seller;
        this.price = price;
        this.url = url;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGoodsPricesDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public String getSeller() {
        return seller;
    }

    public void setSeller(String seller) {
        this.seller = seller;
    }

    public Double getPrice() {
        return price;
    }

    public void setPrice(Double price) {
        this.price = price;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    /** To-one relationship, resolved on first access. */
    public PriceType getPriceType() {
        Long __key = this.id;
        if (priceType__resolvedKey == null || !priceType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PriceTypeDao targetDao = daoSession.getPriceTypeDao();
            PriceType priceTypeNew = targetDao.load(__key);
            synchronized (this) {
                priceType = priceTypeNew;
            	priceType__resolvedKey = __key;
            }
        }
        return priceType;
    }

    public void setPriceType(PriceType priceType) {
        synchronized (this) {
            this.priceType = priceType;
            id = priceType == null ? null : priceType.getId();
            priceType__resolvedKey = id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
