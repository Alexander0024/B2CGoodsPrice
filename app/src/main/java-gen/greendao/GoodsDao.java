package greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import greendao.Goods;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS".
*/
public class GoodsDao extends AbstractDao<Goods, Long> {

    public static final String TABLENAME = "GOODS";

    /**
     * Properties of entity Goods.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property GoodsId = new Property(0, Long.class, "goodsId", true, "GOODS_ID");
        public final static Property GoodsName = new Property(1, String.class, "goodsName", false, "GOODS_NAME");
        public final static Property GoodsStandard = new Property(2, String.class, "goodsStandard", false, "GOODS_STANDARD");
        public final static Property CheapestOnline = new Property(3, Double.class, "cheapestOnline", false, "CHEAPEST_ONLINE");
        public final static Property CheapestOffline = new Property(4, Double.class, "cheapestOffline", false, "CHEAPEST_OFFLINE");
        public final static Property GoodsTypeId = new Property(5, Long.class, "goodsTypeId", false, "GOODS_TYPE_ID");
        public final static Property GoodsBrandId = new Property(6, Long.class, "goodsBrandId", false, "GOODS_BRAND_ID");
    };

    private DaoSession daoSession;

    private Query<Goods> goodsType_GoodsListQuery;
    private Query<Goods> goodsBrand_GoodsListQuery;

    public GoodsDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS\" (" + //
                "\"GOODS_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: goodsId
                "\"GOODS_NAME\" TEXT," + // 1: goodsName
                "\"GOODS_STANDARD\" TEXT," + // 2: goodsStandard
                "\"CHEAPEST_ONLINE\" REAL," + // 3: cheapestOnline
                "\"CHEAPEST_OFFLINE\" REAL," + // 4: cheapestOffline
                "\"GOODS_TYPE_ID\" INTEGER," + // 5: goodsTypeId
                "\"GOODS_BRAND_ID\" INTEGER);"); // 6: goodsBrandId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Goods entity) {
        stmt.clearBindings();
 
        Long goodsId = entity.getGoodsId();
        if (goodsId != null) {
            stmt.bindLong(1, goodsId);
        }
 
        String goodsName = entity.getGoodsName();
        if (goodsName != null) {
            stmt.bindString(2, goodsName);
        }
 
        String goodsStandard = entity.getGoodsStandard();
        if (goodsStandard != null) {
            stmt.bindString(3, goodsStandard);
        }
 
        Double cheapestOnline = entity.getCheapestOnline();
        if (cheapestOnline != null) {
            stmt.bindDouble(4, cheapestOnline);
        }
 
        Double cheapestOffline = entity.getCheapestOffline();
        if (cheapestOffline != null) {
            stmt.bindDouble(5, cheapestOffline);
        }
 
        Long goodsTypeId = entity.getGoodsTypeId();
        if (goodsTypeId != null) {
            stmt.bindLong(6, goodsTypeId);
        }
 
        Long goodsBrandId = entity.getGoodsBrandId();
        if (goodsBrandId != null) {
            stmt.bindLong(7, goodsBrandId);
        }
    }

    @Override
    protected void attachEntity(Goods entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Goods readEntity(Cursor cursor, int offset) {
        Goods entity = new Goods( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // goodsId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // goodsName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // goodsStandard
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // cheapestOnline
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // cheapestOffline
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // goodsTypeId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // goodsBrandId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Goods entity, int offset) {
        entity.setGoodsId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGoodsName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGoodsStandard(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCheapestOnline(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setCheapestOffline(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setGoodsTypeId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setGoodsBrandId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Goods entity, long rowId) {
        entity.setGoodsId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Goods entity) {
        if(entity != null) {
            return entity.getGoodsId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "goodsList" to-many relationship of GoodsType. */
    public List<Goods> _queryGoodsType_GoodsList(Long goodsTypeId) {
        synchronized (this) {
            if (goodsType_GoodsListQuery == null) {
                QueryBuilder<Goods> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GoodsTypeId.eq(null));
                goodsType_GoodsListQuery = queryBuilder.build();
            }
        }
        Query<Goods> query = goodsType_GoodsListQuery.forCurrentThread();
        query.setParameter(0, goodsTypeId);
        return query.list();
    }

    /** Internal query to resolve the "goodsList" to-many relationship of GoodsBrand. */
    public List<Goods> _queryGoodsBrand_GoodsList(Long goodsBrandId) {
        synchronized (this) {
            if (goodsBrand_GoodsListQuery == null) {
                QueryBuilder<Goods> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GoodsBrandId.eq(null));
                goodsBrand_GoodsListQuery = queryBuilder.build();
            }
        }
        Query<Goods> query = goodsBrand_GoodsListQuery.forCurrentThread();
        query.setParameter(0, goodsBrandId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGoodsTypeDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getGoodsBrandDao().getAllColumns());
            builder.append(" FROM GOODS T");
            builder.append(" LEFT JOIN GOODS_TYPE T0 ON T.\"GOODS_TYPE_ID\"=T0.\"GOODS_TYPE_ID\"");
            builder.append(" LEFT JOIN GOODS_BRAND T1 ON T.\"GOODS_BRAND_ID\"=T1.\"GOODS_BRAND_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Goods loadCurrentDeep(Cursor cursor, boolean lock) {
        Goods entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        GoodsType goodsType = loadCurrentOther(daoSession.getGoodsTypeDao(), cursor, offset);
        entity.setGoodsType(goodsType);
        offset += daoSession.getGoodsTypeDao().getAllColumns().length;

        GoodsBrand goodsBrand = loadCurrentOther(daoSession.getGoodsBrandDao(), cursor, offset);
        entity.setGoodsBrand(goodsBrand);

        return entity;    
    }

    public Goods loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Goods> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Goods> list = new ArrayList<Goods>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Goods> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Goods> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
