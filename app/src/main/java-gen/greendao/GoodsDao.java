package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Goods;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS".
*/
public class GoodsDao extends AbstractDao<Goods, Long> {

    public static final String TABLENAME = "GOODS";

    /**
     * Properties of entity Goods.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GoodsId = new Property(1, Long.class, "goodsId", false, "GOODS_ID");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Brand = new Property(3, String.class, "brand", false, "BRAND");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Standard = new Property(5, String.class, "standard", false, "STANDARD");
        public final static Property Cheapest_online = new Property(6, Double.class, "cheapest_online", false, "CHEAPEST_ONLINE");
        public final static Property Cheapest_offline = new Property(7, Double.class, "cheapest_offline", false, "CHEAPEST_OFFLINE");
    };

    private DaoSession daoSession;


    public GoodsDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"GOODS_ID\" INTEGER," + // 1: goodsId
                "\"TYPE\" TEXT," + // 2: type
                "\"BRAND\" TEXT," + // 3: brand
                "\"NAME\" TEXT," + // 4: name
                "\"STANDARD\" TEXT," + // 5: standard
                "\"CHEAPEST_ONLINE\" REAL," + // 6: cheapest_online
                "\"CHEAPEST_OFFLINE\" REAL);"); // 7: cheapest_offline
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Goods entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long goodsId = entity.getGoodsId();
        if (goodsId != null) {
            stmt.bindLong(2, goodsId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(4, brand);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String standard = entity.getStandard();
        if (standard != null) {
            stmt.bindString(6, standard);
        }
 
        Double cheapest_online = entity.getCheapest_online();
        if (cheapest_online != null) {
            stmt.bindDouble(7, cheapest_online);
        }
 
        Double cheapest_offline = entity.getCheapest_offline();
        if (cheapest_offline != null) {
            stmt.bindDouble(8, cheapest_offline);
        }
    }

    @Override
    protected void attachEntity(Goods entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Goods readEntity(Cursor cursor, int offset) {
        Goods entity = new Goods( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // goodsId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // brand
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // standard
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // cheapest_online
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7) // cheapest_offline
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Goods entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGoodsId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBrand(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStandard(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCheapest_online(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setCheapest_offline(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Goods entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Goods entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
